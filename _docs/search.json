[
  {
    "objectID": "config.html",
    "href": "config.html",
    "title": "EVCI config",
    "section": "",
    "text": "Read input data\n\n\nsetup_and_read_data\n\n setup_and_read_data (corridor:str, input_path='input/',\n                      output_path='output/')\n\nThis function sets up paths and reads input excel files for a specified corridor\nArguments:\n\ncorridor: a string that identifies the corridor being analyzed (e.g. chandigarh_leh)\ninput_path: a string denoting base directory under which input files (xlsx and shape files) are available for analysis. Default is 'input/'\noutput_path: a string denoting base directory under which output files will be stored. Default is 'output/'\n\nReturns:\n\nmodel: dataframe of model parameters (from model.xlsx)\nsites: dataframe of sites (from sites.xlsx)\ntraffic: dataframe of traffic profile (from traffic.xlsx)\ngrid: dataframe of grid parameters (from grid.xlsx)\nINPUT_PATH: a string indicating the input_path (e.g. input/chandigarh_leh/)\nOUTPUT_PATH: a string indicating the output path (e.g. output/chandigarh_leh/)\n\n\n#example usage\nm,s,t,g,INPUT_PATH,OUTPUT_PATH = setup_and_read_data('chandigarh_leh')\n\n\n\n\nData availability check\nLet’s check if the four excel sheets provided have the correctly named worksheets within them.\n\n\ndata_availability_check\n\n data_availability_check (m, s, t, g)\n\nThis function checks if the excel files contain the mandatory worksheets.\nArguments:\n\nm: dataframe of model parameters (from model.xlsx)\ns: dataframe of sites (from sites.xlsx)\nt: dataframe of traffic profile (from traffic.xlsx)\ng: dataframe of grid parameters (from grid.xlsx)\n\nReturns:\nA list of xlsx file names wiht missing mandatory sheets\n\ndata_availability_check(m,s,t,g)\n\n[]\n\n\n\n\n\nData integrity check\nLet’s now check if any of the mandatory columns in each of the worksheets are all empty!\n\n\ndata_integrity_check\n\n data_integrity_check (m, s, t, g, verbose=False)\n\nThis function checks for integrity of excel data by checking missing values.\nArguments:\n\nm: dataframe of model parameters (from model.xlsx)\ns: dataframe of sites (from sites.xlsx)\nt: dataframe of traffic profile (from traffic.xlsx)\ng: dataframe of grid parameters (from grid.xlsx)\n\nReturns:\nA dictionary of missing columns with their corresponding xlsx filename and worksheet name.\n\ndata_integrity_check(m,s,t,g)\n\n[{'charger_specific': ['Range',\n   'UoM',\n   '2W',\n   '3WS',\n   '4WS',\n   '4WF',\n   'Unnamed: 9',\n   '2W.1',\n   '3WS.1',\n   '4WS.1',\n   '4WF.1'],\n  'battery_specific': ['Parameter',\n   'Value',\n   'Range',\n   'User Input?',\n   'Unnamed: 4',\n   'Same battery swapping station is used for 2W and 3W',\n   'Unnamed: 6',\n   'Unnamed: 7',\n   'Unnamed: 8',\n   'Unnamed: 9',\n   'Unnamed: 10',\n   'Unnamed: 11',\n   'Unnamed: 12',\n   'Unnamed: 13',\n   'Unnamed: 14',\n   'Unnamed: 15',\n   'Unnamed: 16',\n   'Unnamed: 17',\n   'Unnamed: 18',\n   'Unnamed: 19'],\n  'others': ['Range']},\n {'sites': ['Address',\n   'Traffic congestion',\n   'Year for Site recommendation',\n   'Hoarding/Kiosk (1 is yes & 0 is no)',\n   'Hoarding margin',\n   'Kiosk margin',\n   'Available area',\n   'Upfront cost per sqm (land)',\n   'Yearly cost per sqm (land)',\n   'Upfront cost per sqm (kiosk)',\n   'Yearly cost per sqm (kiosk)',\n   'Upfront cost per sqm (hoarding)',\n   'Yearly cost per sqm (hoarding)',\n   'Battery swap available']},\n {'profile': []},\n {'grid': ['Longitude',\n   'Latitude',\n   'Tariff',\n   'Power Outage',\n   'Available load']}]\n\n\n\n# verbose output\ndata_integrity_check(m,s,t,g,verbose=True)\n\nColumn 'Range' of 'charger_specific' has 12/15 missing values\nColumn 'UoM' of 'charger_specific' has 8/15 missing values\nColumn '2W' of 'charger_specific' has 8/15 missing values\nColumn '3WS' of 'charger_specific' has 8/15 missing values\nColumn '4WS' of 'charger_specific' has 8/15 missing values\nColumn '4WF' of 'charger_specific' has 8/15 missing values\nColumn 'Unnamed: 9' of 'charger_specific' has 15/15 missing values\nColumn '2W.1' of 'charger_specific' has 9/15 missing values\nColumn '3WS.1' of 'charger_specific' has 9/15 missing values\nColumn '4WS.1' of 'charger_specific' has 9/15 missing values\nColumn '4WF.1' of 'charger_specific' has 9/15 missing values\nColumn 'Parameter' of 'battery_specific' has 10/18 missing values\nColumn 'Value' of 'battery_specific' has 10/18 missing values\nColumn 'Range' of 'battery_specific' has 18/18 missing values\nColumn 'User Input?' of 'battery_specific' has 10/18 missing values\nColumn 'Unnamed: 4' of 'battery_specific' has 18/18 missing values\nColumn 'Same battery swapping station is used for 2W and 3W' of 'battery_specific' has 11/18 missing values\nColumn 'Unnamed: 6' of 'battery_specific' has 11/18 missing values\nColumn 'Unnamed: 7' of 'battery_specific' has 11/18 missing values\nColumn 'Unnamed: 8' of 'battery_specific' has 16/18 missing values\nColumn 'Unnamed: 9' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 10' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 11' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 12' of 'battery_specific' has 17/18 missing values\nColumn 'Unnamed: 13' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 14' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 15' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 16' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 17' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 18' of 'battery_specific' has 18/18 missing values\nColumn 'Unnamed: 19' of 'battery_specific' has 17/18 missing values\nColumn 'Range' of 'others' has 8/8 missing values\nColumn 'Address' of 'sites' has 48/48 missing values\nColumn 'Traffic congestion' of 'sites' has 48/48 missing values\nColumn 'Year for Site recommendation' of 'sites' has 48/48 missing values\nColumn 'Hoarding/Kiosk (1 is yes & 0 is no)' of 'sites' has 48/48 missing values\nColumn 'Hoarding margin' of 'sites' has 48/48 missing values\nColumn 'Kiosk margin' of 'sites' has 48/48 missing values\nColumn 'Available area' of 'sites' has 48/48 missing values\nColumn 'Upfront cost per sqm (land)' of 'sites' has 48/48 missing values\nColumn 'Yearly cost per sqm (land)' of 'sites' has 48/48 missing values\nColumn 'Upfront cost per sqm (kiosk)' of 'sites' has 48/48 missing values\nColumn 'Yearly cost per sqm (kiosk)' of 'sites' has 48/48 missing values\nColumn 'Upfront cost per sqm (hoarding)' of 'sites' has 48/48 missing values\nColumn 'Yearly cost per sqm (hoarding)' of 'sites' has 48/48 missing values\nColumn 'Battery swap available' of 'sites' has 48/48 missing values\nColumn 'Longitude' of 'grid' has 1/4 missing values\nColumn 'Latitude' of 'grid' has 1/4 missing values\nColumn 'Tariff' of 'grid' has 4/4 missing values\nColumn 'Power Outage' of 'grid' has 4/4 missing values\nColumn 'Available load' of 'grid' has 4/4 missing values\n\n\n[{'charger_specific': ['Range',\n   'UoM',\n   '2W',\n   '3WS',\n   '4WS',\n   '4WF',\n   'Unnamed: 9',\n   '2W.1',\n   '3WS.1',\n   '4WS.1',\n   '4WF.1'],\n  'battery_specific': ['Parameter',\n   'Value',\n   'Range',\n   'User Input?',\n   'Unnamed: 4',\n   'Same battery swapping station is used for 2W and 3W',\n   'Unnamed: 6',\n   'Unnamed: 7',\n   'Unnamed: 8',\n   'Unnamed: 9',\n   'Unnamed: 10',\n   'Unnamed: 11',\n   'Unnamed: 12',\n   'Unnamed: 13',\n   'Unnamed: 14',\n   'Unnamed: 15',\n   'Unnamed: 16',\n   'Unnamed: 17',\n   'Unnamed: 18',\n   'Unnamed: 19'],\n  'others': ['Range']},\n {'sites': ['Address',\n   'Traffic congestion',\n   'Year for Site recommendation',\n   'Hoarding/Kiosk (1 is yes & 0 is no)',\n   'Hoarding margin',\n   'Kiosk margin',\n   'Available area',\n   'Upfront cost per sqm (land)',\n   'Yearly cost per sqm (land)',\n   'Upfront cost per sqm (kiosk)',\n   'Yearly cost per sqm (kiosk)',\n   'Upfront cost per sqm (hoarding)',\n   'Yearly cost per sqm (hoarding)',\n   'Battery swap available']},\n {'profile': []},\n {'grid': ['Longitude',\n   'Latitude',\n   'Tariff',\n   'Power Outage',\n   'Available load']}]\n\n\n\n\n\nRead global variables from xlsx\n\n\nread_globals\n\n read_globals (m, s, t, g, ui_inputs)\n\nThis function returns all global parameters read from the xlsx.\nArguments:\n\nm: dataframe of model parameters (from model.xlsx)\ns: dataframe of sites (from sites.xlsx)\nt: dataframe of traffic profile (from traffic.xlsx)\ng: dataframe of grid parameters (from grid.xlsx)\nui_inputs: dictionary of all parameters selected by use from the frontend with the UI\n\nReturns:\nA dictionary with all hyperparameters required for the model to run\n\n# example usage\n\nui_inputs = { \n    \"backoff_factor\": 1,\n    \"M\": [\"3WS\", \"4WS\", \"4WF\"],\n    \"years_of_analysis\": [1,2,3],\n    \"capex_3WS\": 112000,\n    \"capex_4WS\": 250000,\n    \"capex_4WF\": 1500000,\n    \"hoarding cost\": 900000,\n    \"kiosk_cost\": 180000,\n    \"year1_conversion\": 0.02,\n    \"year2_conversion\": 0.05,\n    \"year3_conversion\": 0.1,\n    \"holiday_percentage\": 0.3,\n    \"fast_charging\": 0.3,\n    \"slow_charging\": 0.15,\n    \"cluster\": False,\n    \"cluster_th\": 0.2,\n    \"plot_dendrogram\": False,\n    \"use_defaults\": False \n}\n\nr = read_globals(m,s,t,g, ui_inputs)\nprint(r['Kj'])\nprint(r['charger_types'])\n\n{'3WS': 112000, '4WS': 250000, '4WF': 1500000}\n['3WS', '4WS', '4WF']"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EVCI Siting Tool",
    "section": "",
    "text": "pip install evci_tool"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "EVCI Siting Tool",
    "section": "How to use",
    "text": "How to use\nThe model inputs are provided in the form of excel files (xlsx). The analyze_sites() is the entry level function and completes the analysis for specified corridor\n\nfrom evci_tool.config import *\nfrom evci_tool.model import *\nfrom evci_tool.analysis import *\n\nui_inputs = { \n    \"backoff_factor\": 1,\n    \"M\": [\"3WS\", \"4WS\", \"4WF\"],\n    \"years_of_analysis\": [1,2,3],\n    \"capex_3WS\": 112000,\n    \"capex_4WS\": 250000,\n    \"capex_4WF\": 1500000,\n    \"hoarding cost\": 900000,\n    \"kiosk_cost\": 180000,\n    \"year1_conversion\": 0.02,\n    \"year2_conversion\": 0.05,\n    \"year3_conversion\": 0.1,\n    \"holiday_percentage\": 0.3,\n    \"fast_charging\": 0.3,\n    \"slow_charging\": 0.15,\n    \"cluster\": False,\n    \"cluster_th\": 0.2,\n    \"plot_dendrogram\": False,\n    \"use_defaults\": False \n}\n\n\nu_df = analyze_sites ('mumbai_goa',ui_inputs)\nu_df.head()\n\n\nInitial Analysis\n________________\n\nNumber of sites: 244/244\n\n\n100%|██████████| 244/244 [00:49<00:00,  4.96it/s]\n\n\nTotal capex charges = INR Cr 45.68\nTotal opex charges = INR Cr 87.77\nTotal Margin = INR Cr 33.53\nconfirmed sites with utilization > 20%: 0\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Latitude\n      Longitude\n      Traffic congestion\n      year 1\n      kiosk hoarding\n      hoarding margin\n      geometry\n      utilization\n      unserviced\n      capex\n      opex\n      margin\n      max vehicles\n      estimated vehicles\n    \n  \n  \n    \n      0\n      Mahanagar Gas CNG station\n      19.177391\n      72.968405\n      4\n      1\n      1\n      15520\n      POINT (72.96841 19.17739)\n      0.096406\n      NaN\n      1872000.0\n      3.868338e+06\n      1.256811e+06\n      25.0\n      2.0\n    \n    \n      1\n      Gurukrupa Indian Oil Petrol Pump\n      19.138905\n      73.050305\n      4\n      1\n      1\n      15520\n      POINT (73.05031 19.13891)\n      0.047681\n      NaN\n      1872000.0\n      3.663296e+06\n      1.226055e+06\n      25.0\n      1.0\n    \n    \n      2\n      Mohan Warehouse\n      19.124338\n      73.054793\n      4\n      1\n      1\n      15520\n      POINT (73.05479 19.12434)\n      0.001121\n      NaN\n      1872000.0\n      3.469664e+06\n      1.197010e+06\n      25.0\n      0.0\n    \n    \n      3\n      HP petrol pump\n      19.122921\n      73.054856\n      4\n      1\n      1\n      15520\n      POINT (73.05486 19.12292)\n      0.000676\n      NaN\n      1872000.0\n      3.467810e+06\n      1.196732e+06\n      25.0\n      0.0\n    \n    \n      4\n      Bharat Petroleum Petrol Pump\n      19.119491\n      73.056161\n      4\n      1\n      1\n      15520\n      POINT (73.05616 19.11949)\n      0.000549\n      NaN\n      1872000.0\n      3.467281e+06\n      1.196653e+06\n      25.0\n      0.0"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "EVCI siting model",
    "section": "",
    "text": "score\n\n score (r, s_df_distances, j, i, hj, k, backoff=True, backoff_factor=1)\n\nThis function computes the utilization score of each site.\nArguments:\n\nr: a dictionary of global parameters read from the xlsx files.\ns_df_distances: a dataframe of Euclidean distances of each site from all others. (NxN matrix)\nj: string indicating specific charger type\ni: integer indicating a specific site\nhj:\nk: integer year (1, 2 or 3 of the policy)\nbackoff: a boolean indicating whether backoff should be incorporated\nbackoff_factor: a float weighting factor for the backoff (mostly empirically selected)\n\nReturns:\n\nnorm_uw: float indicating normalized utilization on a typical working day\nnorm_uh: float indicating normalized utilization on a typical holiday\nnorm_vw: float indicating number of vehicles not utilizing charging on a working day\nnorm_vh: float indicating number of vehicles not utilizing charging on a holiday\n\n\n\n\ncapex\n\n capex (r, i)\n\nThis function computes the capex requirements of each site\nArguments:\n\nr: a dictionary of global parameters read from the xlsx files.\ni: integer indicating a specific site\n\nReturns:\ninteger. Capex value for a given site\n\n\n\nopex\n\n opex (r, s_df_distances, i)\n\nThis function computes the opex for each site.\nArguments:\n\nr: a dictionary of global parameters read from the xlsx files.\ns_df_distances: a dataframe of Euclidean distances of each site from all others. (NxN matrix)\ni: integer indicating a specific site\n\nReturns:\ninteger opex value for a given site\n\n\n\nmargin\n\n margin (r, s_df_distances, i)\n\nThis function computes the margins per site.\nArguments:\n\nr: a dictionary of global parameters read from the xlsx files.\ns_df_distances: a dataframe of Euclidean distances of each site from all others. (NxN matrix)\ni: integer indicating a specific site\n\nReturns:\ninteger margin value of a site\n\n\n\nrun_analysis\n\n run_analysis (m, s, t, g, ui_inputs, s_df, backoff_factor=1)\n\nThis function runs analysis for a given set of sites.\nArguments:\n\nm: dataframe of model parameters (from model.xlsx)\ns: dataframe of sites (from sites.xlsx)\nt: dataframe of traffic profile (from traffic.xlsx)\ng: dataframe of grid parameters (from grid.xlsx)\nui_inputs: json object of user selected inputs from the UI\ns_df: pre-processed geopandas dataframe with each point stored as shapely point object\nbackoff_factor: a float value of backoff to cater for neighborhood (empirical)\n\nReturns:\nA dataframe of utilization values for all sites."
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "EVCI analysis",
    "section": "",
    "text": "run_episode (m, s, t, g, ui_inputs, s_df, txt, OUTPUT_PATH, corridor)\n\nThis function runs a full episode of analysis on a set of sites.\nArguments:\n\nm: dataframe of model parameters (from model.xlsx)\ns: dataframe of sites (from sites.xlsx)\nt: dataframe of traffic profile (from traffic.xlsx)\ng: dataframe of grid parameters (from grid.xlsx)\nui_inputs: json object of user selected inputs from the UI\ns_df: pre-processed geopandas dataframe with each point stored as shapely point object\ntxt: a string that identifies the episode (e.g. initial, final, with_cluster etc)\nOUTPUT_PATH: the directory path where the generated output files will be stored\ncorridor: a string that identifies the corridor being analyzed (e.g. chandigarh_leh)\n\nReturns:\nA pandas dataframe: s_u_df is a dataframe with computed utilization values for each site.\n\n\n\n\n\n analyze_sites (corridor:str, ui_inputs)\n\nThe function analyzes sites specified as part of a corridor.\nArguments:\n\ncorridor: a string that identifies the corridor being analyzed (e.g. chandigarh_leh)\nui_inputs: json object of user selected inputs from the UI\n\nReturns:\ns_u_df: a dataframe containing the list of sites and their utilization numbers.\n\n# Inputs from UI\nui_inputs = { \n    \"backoff_factor\": 1,\n    \"M\": [\"3WS\", \"4WS\", \"4WF\"],\n    \"years_of_analysis\": [1,2,3],\n    \"capex_2W\": 2500,\n    \"capex_3WS\": 112000,\n    \"capex_4WS\": 250000,\n    \"capex_4WF\": 1500000,\n    \"hoarding cost\": 900000,\n    \"kiosk_cost\": 180000,\n    \"year1_conversion\": 0.05,\n    \"year2_conversion\": 0.15,\n    \"year3_conversion\": 0.25,\n    \"holiday_percentage\": 1,\n    \"fast_charging\": 0.25,\n    \"slow_charging\": 0.25,\n    \"cluster\": False,\n    \"cluster_th\": 0.2,\n    \"plot_dendrogram\": False,\n    \"use_defaults\": False    \n}\n\ns_u_df = analyze_sites('mumbai_goa', ui_inputs)\n\n\nInitial Analysis\n________________\n\nNumber of sites: 244/244\n\n\n100%|██████████| 244/244 [00:50<00:00,  4.84it/s]\n\n\nTotal capex charges = INR Cr 45.68\nTotal opex charges = INR Cr 94.01\nTotal Margin = INR Cr 34.47\nconfirmed sites with utilization > 20%: 31\n\n\n\ns_u_df.hist(column='utilization');\n\n\n\n\n\n#s_u_df.hist(column='unserviced')"
  },
  {
    "objectID": "analysis.html#with-clustering",
    "href": "analysis.html#with-clustering",
    "title": "EVCI analysis",
    "section": "With Clustering",
    "text": "With Clustering\n\n# Inputs from UI\nui_inputs = { \n    \"backoff_factor\": 1,\n    \"M\": [\"3WS\", \"4WS\", \"4WF\"],\n    \"years_of_analysis\": [1,2,3],\n    \"capex_2W\": 2500,\n    \"capex_3WS\": 112000,\n    \"capex_4WS\": 250000,\n    \"capex_4WF\": 1500000,\n    \"hoarding cost\": 900000,\n    \"kiosk_cost\": 180000,\n    \"year1_conversion\": 0.05,\n    \"year2_conversion\": 0.15,\n    \"year3_conversion\": 0.25,\n    \"holiday_percentage\": 1,\n    \"fast_charging\": 0.25,\n    \"slow_charging\": 0.25,\n    \"cluster\": True,\n    \"cluster_th\": 0.02,\n    \"plot_dendrogram\": True,\n    \"use_defaults\": False    \n}\ns_u_df = analyze_sites('mumbai_goa', ui_inputs)\n\n\nInitial Analysis\n________________\n\nNumber of sites: 244/244\n\n\n100%|██████████| 244/244 [00:54<00:00,  4.50it/s]\n\n\nTotal capex charges = INR Cr 45.68\nTotal opex charges = INR Cr 94.01\nTotal Margin = INR Cr 34.47\ncandidates for clustering:  62\nconfirmed sites with utilization > 2%: 182\nfinal list:  205\n\nClustered Analysis\n________________\n\nNumber of sites: 205/205\n\n\n100%|██████████| 205/205 [00:39<00:00,  5.18it/s]\n\n\nTotal capex charges = INR Cr 38.38\nTotal opex charges = INR Cr 82.27\nTotal Margin = INR Cr 29.47\n\n\n\n\n\n\n# after clustering\ns_u_df.hist(column='utilization');"
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "EVCI maps",
    "section": "",
    "text": "show_map\n\n show_map (corridor:str)\n\nThis function reads corresponding shape file and plots the points\nArguments:\ncorridor: a string describing the corridor to be analyzed\nReturns:\nNone\n\nshow_map(\"mumbai_goa\")\n\nBounding box:  72.8340551 74.8596963 15.1400364 19.2505157"
  }
]